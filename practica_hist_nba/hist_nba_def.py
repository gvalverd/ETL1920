# -*- coding: utf-8 -*-
"""hist_NBA_def.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15fyutDQg11dRI0Aepc2wQYBuCUw7-6os

# Histograma puntos visitante
## Beatriz Cárdaba Rico
El objetivo es realizar un histograma con los puntos de los equipos visitantes a partir del archivo partidosLigaNBA.csv mediante Spark
Para ello se segurán los pasos pautados.


- IMPORTAMOS DATOS Y SPARK

 - Instalamos Apache y Spark
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q https://www-us.apache.org/dist/spark/spark-2.4.7/spark-2.4.7-bin-hadoop2.7.tgz
!tar xf spark-2.4.7-bin-hadoop2.7.tgz
!pip install -q findspark

"""- Importamos JAVA_HOME y SPARK_HOME"""

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-2.4.7-bin-hadoop2.7"

""" - Importamos findspark y SparkContext"""

import findspark
findspark.init()
from pyspark import SparkContext

""" - Indicammos las caraterísticas del Sparkcontext"""

.sc = SparkContext("local", "First App")

""" - Importamos el cvs "partidosLigaNBA.csv""""

data_file = "partidosLigaNBA.csv" # lo hemos subido a los archivos del colaborate
raw_data = sc.textFile(data_file) # lee los datos como texto según hemos indicado en sc

""" - Visualizamos las primeras 5 filas"""

raw_data.take(5) # para ver las filas que indiquemos

"""- Identificamos la primera fila y la eliminamos"""

header1 = raw_data.filter(lambda x: 'PTS' in x) #asiganmos el indice de las variables

datos = raw_data.subtract(header1) #substraemos el header

"""Ahora "datos" no tiene encabezado"""

datos.take(5)

"""Separamos cada parte del string que componen las filas, en este caso están separadas las diferentes partes de cada fila con ":""""

from pprint import pprint
data_separar = datos.map(lambda x: x.split(":")) #realizamos la separación de las variables

data_separar.take(5) #comprobamos

"""Creamos los datos de los puntos para los visitantes y los locales"""

#En la posición 4 están los puntos de local, #los puntos eran strings, al realizar el mapeo, los he convertido a númericos.
datos_puntos_local= data_separar.map(lambda x: int(x[6]))
datos_puntos_visit = data_separar.map(lambda x: int(x[4]))

datos_puntos_visit.take(10) # vemos que hemos creado una lista con los puntos del visitante

"""- Definimos una función "intervalos" para asignar los puntos de los visitantes a un grupo en función de su valor. Definimos ocho posibles grupos:"""

def intervalos(x):   
  if x<50 : # si es menos de 50
	   return '1_int50' # asignamos el grupo 1 (ponemos el 1 delante para que lo ordene de manera ascendente)
  elif x<70:
	    return '2_int50_70'
  elif x<80:
      return '3_int70_80'
  elif x<90:
      return '4_int80_90'
  elif x<100:
      return '5_int90_100'
  elif x<110:
      return '6_int100_110'
  elif x<120:
      return '7_int110_120'
  elif x<200:
      return '8_int120_200'

"""Definimos la función que sea capaz de
* Extraer los datos. Del csv y separados por :

* Filtrar aquellos casos que no sean. Sólo queremos los dígitos

* Aplicar una función map que transforme cada número en uno de los intervalos del histograma (elegidos por vosotros mismos). Aplicar la función intervalos

* Método de agrupación para generar un vector formado por cada elemento asociado a cada intervalo.  ReduceByKEy
"""

# FUNCION EXPLICADA
#puntos_intervalos = datos.map(lambda s: s.split(":")[-1]) \ #queremos que seleccione los datos separados por
                     # .filter(lambda puntos_visit: puntos_visit.isdigit()) \ # que seleccione los datos que son dígitos
                      #.map(lambda puntos_visit: int(puntos_visit)) \ # pasamos los puntos visitantes a formato int
                     # .map(lambda x : (intervalos(x),1)) \ # aplicamos la función intervalos a los puntos de visitantes
                      #.reduceByKey(lambda a, b: a + b) \ # queremos que agrupe por el intervalo asociado y sume todos los partidos de ese intervalo
                      #.collect()

puntos_intervalos = datos.map(lambda s: s.split(":")[-1]) \
                      .filter(lambda puntos_visit: puntos_visit.isdigit()) \
                      .map(lambda puntos_visit: int(puntos_visit)) \
                      .map(lambda x : (intervalos(x),1)) \
                      .reduceByKey(lambda a, b: a + b) \
                      .collect()

puntos_intervalos # vemos los puntos agrupados según el intervalo

""" - Ordenamos los datos en función del primer dígito del nombre del grupo"""

puntos_intervalos.sort()

"""- Importamos pandas y numpy para poder crear un dataframe de los datos obtenidos"""

import pandas as pd
import numpy as np
puntos_intervalos_df = pd.DataFrame(puntos_intervalos)

"""- Importamos Matplot para dibujar el histograma"""

import matplotlib.pyplot as plt

"""- Dibujamos el Histograma:"""

intervalos_names, y_points = zip(*puntos_intervalos) # separamos en los nombres de los intervalos y los puntos asociados
intervalos_num = np.arange(len(intervalos_names)) # número de categorias creadas


f, ax = plt.subplots(figsize=(18,10)) # establecemos el tamaño del histograma
plt.bar(intervalos_num, y_points, width = 1, align='center') # queremos que dibuje los intervalos y los puntos

plt.xticks(intervalos_num, intervalos_names)  # Establece las ubicaciones y las etiquetas. Que a los 8 intervalos les ponga su nombre que se ha separado en intervalos_names
plt.yticks(y_points) # Establece las ubicaciones y las etiquetas. Los puntos